// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240317113724_Test03171937")]
    partial class Test03171937
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationCore.Entities.ArchiveOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("新增時間");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("datetime")
                        .HasComment("修改時間");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("活動名稱");

                    b.Property<DateTime>("EventStartTime")
                        .HasColumnType("datetime")
                        .HasComment("活動開始時間");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("標記封存");

                    b.Property<string>("LocationAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("活動地址");

                    b.Property<string>("LocationName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("活動地點");

                    b.Property<int>("PurchaseAmount")
                        .HasColumnType("int")
                        .HasComment("購買數量");

                    b.Property<string>("SeatNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("座位號碼ex3排13號");

                    b.Property<string>("StreamingPlatform")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("串流平台");

                    b.Property<string>("StreamingUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("串流URL");

                    b.Property<string>("TicketNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("票號");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("money")
                        .HasComment("票價");

                    b.Property<string>("TicketTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("票種名稱");

                    b.HasKey("OrderId");

                    b.ToTable("ArchiveOrders", t =>
                        {
                            t.HasComment("訂單紀錄");
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("區域ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("地區名稱");

                    b.HasKey("Id");

                    b.ToTable("Area", null, t =>
                        {
                            t.HasComment("偏好地區列表");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "北北基宜地區"
                        },
                        new
                        {
                            Id = 2,
                            Name = "桃竹苗地區"
                        },
                        new
                        {
                            Id = 3,
                            Name = "雲嘉南地區"
                        },
                        new
                        {
                            Id = 4,
                            Name = "高屏地區"
                        },
                        new
                        {
                            Id = 5,
                            Name = "中彰投地區"
                        },
                        new
                        {
                            Id = 6,
                            Name = "花東地區"
                        },
                        new
                        {
                            Id = 7,
                            Name = "澎金馬地區"
                        },
                        new
                        {
                            Id = 8,
                            Name = "香港"
                        },
                        new
                        {
                            Id = 9,
                            Name = "澳門"
                        },
                        new
                        {
                            Id = 10,
                            Name = "其他地區"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.CategoryTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("類別TagID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("新增時間");

                    b.Property<DateTime?>("EditeAt")
                        .HasColumnType("datetime")
                        .HasComment("修改時間");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("標記刪除");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("類別Tag名稱");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("排序預設50");

                    b.HasKey("Id")
                        .HasName("PK_Tags");

                    b.ToTable("CategoryTags");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("活動ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Capacity")
                        .HasColumnType("int")
                        .HasComment("可容納人數");

                    b.Property<string>("CoOrganizer")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("協辦單位");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("聯絡人欄位JSON");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("新增時間");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("活動描述HTML");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("datetime")
                        .HasComment("修改時間");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime")
                        .HasComment("結束時間");

                    b.Property<string>("EventImage")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("活動主圖");

                    b.Property<string>("Introduction")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("活動簡介");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("資料封存或強制下架");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit")
                        .HasComment("是否免費");

                    b.Property<bool>("IsPrivateEvent")
                        .HasColumnType("bit")
                        .HasComment("是否公開活動");

                    b.Property<string>("Latitude")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("緯度");

                    b.Property<string>("LocationAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("活動地址");

                    b.Property<string>("LocationName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("活動地點");

                    b.Property<string>("Longitude")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("經度");

                    b.Property<string>("MainOrganizer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("主辦單位");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("活動名稱");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasComment("組織ID");

                    b.Property<string>("ParticipantPeople")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("報名人欄位JSON");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("預設值50");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime")
                        .HasComment("開始時間");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasComment("0未發佈1已發佈");

                    b.Property<string>("StreamingPlatform")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("串流平台");

                    b.Property<string>("StreamingUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("串流網址");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint")
                        .HasComment("0線上1實體");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_Events_OrganizationId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("ApplicationCore.Entities.EventAndTagMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("活動與類別對照ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryTagId")
                        .HasColumnType("int")
                        .HasComment("類別TagID");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("EventID")
                        .HasComment("活動ID");

                    b.HasKey("Id")
                        .HasName("PK_EventAndTagMapping_1");

                    b.HasIndex(new[] { "CategoryTagId" }, "IX_EventAndTagMapping_CategoryTagId");

                    b.HasIndex(new[] { "EventId" }, "IX_EventAndTagMapping_EventID");

                    b.ToTable("EventAndTagMapping", null, t =>
                        {
                            t.HasComment("活動與類別對照");
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.HistoryPassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("新增時間");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("datetime")
                        .HasComment("修改時間");

                    b.Property<string>("UsedPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("使用過的密碼");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasComment("使用者ID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("HistoryPassword", (string)null);
                });

            modelBuilder.Entity("ApplicationCore.Entities.IsPaidRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("付款紀錄ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasComment("訂單ID");

                    b.Property<bool?>("Result")
                        .HasColumnType("bit")
                        .HasComment("付款結果");

                    b.HasKey("Id")
                        .HasName("PK_PaymentDetail");

                    b.ToTable("IsPaidRecords", t =>
                        {
                            t.HasComment("付款紀錄");
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.LogInInfo", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasComment("使用者ID");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("帳號");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("新增時間");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("datetime")
                        .HasComment("修改時間");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("電子郵件");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("密碼");

                    b.HasKey("UserId");

                    b.ToTable("LogInInfo", (string)null);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("訂單ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("聯絡人資料JSON");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("新增時間");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("datetime")
                        .HasComment("修改時間");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("標記封存");

                    b.Property<bool>("IsDisplayed")
                        .HasColumnType("bit")
                        .HasComment("0不顯示參加活動1顯示");

                    b.Property<string>("ParticipantPeople")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("報名人資料JSON");

                    b.Property<byte>("PaymentType")
                        .HasColumnType("tinyint")
                        .HasComment("0免費1信用卡");

                    b.Property<string>("SeatNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("座位號碼ex3排13號");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasComment("0待付款1成功2付款失敗3取消");

                    b.Property<int>("TicketId")
                        .HasColumnType("int")
                        .HasComment("票券ID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasComment("使用者ID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_Orders_UserId");

                    b.ToTable("Orders", t =>
                        {
                            t.HasComment("訂單");
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.OrgFan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("入坑ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FanTime")
                        .HasColumnType("datetime")
                        .HasComment("成為粉絲時間");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasComment("組織ID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasComment("使用者ID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_OrgFan_OrganizationId");

                    b.HasIndex(new[] { "UserId" }, "IX_OrgFan_UserId");

                    b.ToTable("OrgFan", null, t =>
                        {
                            t.HasComment("組織粉絲");
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("組織ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactMobile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("聯絡手機");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("聯絡人姓名");

                    b.Property<string>("ContactTelephone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("連絡電話");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("新增時間");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasComment("組織簡介");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("datetime")
                        .HasComment("修改時間");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Email");

                    b.Property<string>("Fblink")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FBLink")
                        .HasComment("FB連結");

                    b.Property<string>("Igaccount")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IGAccount")
                        .HasComment("IG連結");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImgURL")
                        .HasComment("組織形象圖");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("標記封存");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("組織名稱");

                    b.Property<string>("OrganizationUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OrganizationURL")
                        .HasComment("站內連結");

                    b.Property<string>("OuterUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OuterURL")
                        .HasComment("站外連結");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasComment("擁有者UserId");

                    b.HasKey("Id")
                        .HasName("PK_OrganizationInfo");

                    b.HasIndex(new[] { "OwnerId" }, "IX_Organizations_OwnerId");

                    b.ToTable("Organizations", t =>
                        {
                            t.HasComment("組織");
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.OrganizationAndUserMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("組織與使用者對照ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasComment("組織ID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasComment("使用者ID");

                    b.HasKey("Id")
                        .HasName("PK_OrganizationUserMapping");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_OrganizationAndUserMapping_OrganizationId");

                    b.HasIndex(new[] { "UserId" }, "IX_OrganizationAndUserMapping_UserId");

                    b.ToTable("OrganizationAndUserMapping", null, t =>
                        {
                            t.HasComment("組織與使用者對照");
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.PreFill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("預填資料ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("聯絡地址");

                    b.Property<string>("CompanyAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("公司地址");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("公司名稱");

                    b.Property<int?>("CompanyPostalCode")
                        .HasColumnType("int")
                        .HasComment("公司郵遞區號");

                    b.Property<string>("County")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("縣市");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("新增時間");

                    b.Property<string>("District")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("鄉鎮區域");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("datetime")
                        .HasComment("修改時間");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("手機號碼");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("姓名");

                    b.Property<int?>("PostalCode")
                        .HasColumnType("int")
                        .HasComment("郵遞區號");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("職稱");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasComment("使用者ID");

                    b.HasKey("Id")
                        .HasName("PK_Prefill_1");

                    b.HasIndex("UserId");

                    b.ToTable("PreFill", null, t =>
                        {
                            t.HasComment("報名預填資料");
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.PreferredActivityArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("偏好區域ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int")
                        .HasComment("區域ID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasComment("使用者ID");

                    b.HasKey("Id")
                        .HasName("PK_PreferredActivityArea_1");

                    b.HasIndex(new[] { "AreaId" }, "IX_PreferredActivityArea_AreaId");

                    b.HasIndex(new[] { "UserId" }, "IX_PreferredActivityArea_UserId");

                    b.ToTable("PreferredActivityArea", null, t =>
                        {
                            t.HasComment("使用者偏好活動區域");
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("座位ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("新增時間");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("datetime")
                        .HasComment("修改時間");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("標記封存");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("座位號碼ex3排13號");

                    b.Property<int>("SeatAreaId")
                        .HasColumnType("int")
                        .HasComment("座位區域ID");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasComment("0可選1已選2不可選");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SeatAreaId" }, "IX_Seats_SeatAreaId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SeatArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("座位區域ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("新增時間");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("datetime")
                        .HasComment("修改時間");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("標記封存");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("座位區域名稱");

                    b.HasKey("Id");

                    b.ToTable("SeatAreas");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("票券ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CheckCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("檢查碼");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("新增時間");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("datetime")
                        .HasComment("修改時間");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("作廢票券");

                    b.Property<string>("Number")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("票號");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasComment("訂單ID");

                    b.Property<int?>("SeatId")
                        .HasColumnType("int")
                        .HasComment("座位ID");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasComment("0未驗票1驗票成功");

                    b.Property<int>("TicketTypeId")
                        .HasColumnType("int")
                        .HasComment("票種ID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrderId" }, "IX_Tickets_OrderId");

                    b.HasIndex(new[] { "SeatId" }, "IX_Tickets_SeatId");

                    b.HasIndex(new[] { "TicketTypeId" }, "IX_Tickets_TicketTypeId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("ApplicationCore.Entities.TicketType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("票種ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CapacityAmount")
                        .HasColumnType("int")
                        .HasComment("票券數量");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("新增時間");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("datetime")
                        .HasComment("修改時間");

                    b.Property<DateTime>("EndSaleTime")
                        .HasColumnType("datetime")
                        .HasComment("結束販售時間");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasComment("活動ID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("強制下架");

                    b.Property<bool>("IsDisplayed")
                        .HasColumnType("bit")
                        .HasComment("是否顯示");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("票種名稱");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasComment("票價");

                    b.Property<byte>("Sort")
                        .HasColumnType("tinyint")
                        .HasComment("預設值50");

                    b.Property<DateTime>("StartSaleTime")
                        .HasColumnType("datetime")
                        .HasComment("開始販售時間");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EventId" }, "IX_TicketTypes_EventId");

                    b.ToTable("TicketTypes");
                });

            modelBuilder.Entity("ApplicationCore.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasComment("使用者ID");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("date")
                        .HasComment("生日");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("新增時間");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("datetime")
                        .HasComment("修改時間");

                    b.Property<bool>("EdmSubscription")
                        .HasColumnType("bit")
                        .HasComment("訂閱電子報");

                    b.Property<byte?>("Gender")
                        .HasColumnType("tinyint")
                        .HasComment("性別");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("帳號照片");

                    b.Property<DateTime?>("LastLogInAt")
                        .HasColumnType("datetime")
                        .HasComment("上次登入時間");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("手機號碼");

                    b.Property<string>("Nickname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("暱稱");

                    b.Property<string>("PersonalProfile")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasComment("個人簡介");

                    b.Property<string>("PersonalUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PersonalURL")
                        .HasComment("個人網址");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasComment("0未驗證EMAIL1已驗證EMAIL");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthday = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 3, 17, 19, 37, 24, 144, DateTimeKind.Local).AddTicks(3123),
                            EditedAt = new DateTime(2024, 3, 17, 19, 37, 24, 144, DateTimeKind.Local).AddTicks(3123),
                            EdmSubscription = true,
                            Gender = (byte)1,
                            Image = "https://image.com/alice.jpg",
                            LastLogInAt = new DateTime(2024, 3, 17, 19, 37, 24, 144, DateTimeKind.Local).AddTicks(3109),
                            Mobile = "0912345678",
                            Nickname = "Alice",
                            PersonalProfile = "I'm Alice!",
                            PersonalUrl = "https://alice.com",
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 2,
                            Birthday = new DateTime(1985, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 3, 17, 19, 37, 24, 144, DateTimeKind.Local).AddTicks(3127),
                            EdmSubscription = false,
                            Gender = (byte)2,
                            Mobile = "0987654321",
                            Nickname = "Bob",
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 3,
                            Birthday = new DateTime(1995, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 3, 7, 19, 37, 24, 144, DateTimeKind.Local).AddTicks(3134),
                            EditedAt = new DateTime(2024, 3, 15, 19, 37, 24, 144, DateTimeKind.Local).AddTicks(3135),
                            EdmSubscription = true,
                            Gender = (byte)2,
                            Image = "https://image.com/charlie.png",
                            LastLogInAt = new DateTime(2024, 3, 12, 19, 37, 24, 144, DateTimeKind.Local).AddTicks(3130),
                            Mobile = "0955555555",
                            Nickname = "Charlie",
                            PersonalProfile = "Hello world!",
                            PersonalUrl = "https://charlie.com",
                            Status = (byte)1
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.ArchiveOrder", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Order", "Order")
                        .WithOne("ArchiveOrder")
                        .HasForeignKey("ApplicationCore.Entities.ArchiveOrder", "OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_ArchiveOrders_Orders");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Event", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Organization", "Organization")
                        .WithMany("Events")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("FK_Events_Organizations");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ApplicationCore.Entities.EventAndTagMapping", b =>
                {
                    b.HasOne("ApplicationCore.Entities.CategoryTag", "CategoryTag")
                        .WithMany("EventAndTagMappings")
                        .HasForeignKey("CategoryTagId")
                        .IsRequired()
                        .HasConstraintName("FK_Event and Tag Mapping_Tags");

                    b.HasOne("ApplicationCore.Entities.Event", "Event")
                        .WithMany("EventAndTagMappings")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_EventAndTagMapping_pEvents");

                    b.Navigation("CategoryTag");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ApplicationCore.Entities.HistoryPassword", b =>
                {
                    b.HasOne("ApplicationCore.Entities.User", "User")
                        .WithMany("HistoryPasswords")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_HistoryPassword_Users1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApplicationCore.Entities.LogInInfo", b =>
                {
                    b.HasOne("ApplicationCore.Entities.User", "User")
                        .WithOne("LogInInfo")
                        .HasForeignKey("ApplicationCore.Entities.LogInInfo", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_LogInInfo_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Order", b =>
                {
                    b.HasOne("ApplicationCore.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Users1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApplicationCore.Entities.OrgFan", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Organization", "Organization")
                        .WithMany("OrgFans")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("FK_OrgFan_Organizations");

                    b.HasOne("ApplicationCore.Entities.User", "User")
                        .WithMany("OrgFans")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_OrgFan_Users");

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Organization", b =>
                {
                    b.HasOne("ApplicationCore.Entities.User", "Owner")
                        .WithMany("Organizations")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK_Organizations_Users");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ApplicationCore.Entities.OrganizationAndUserMapping", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Organization", "Organization")
                        .WithMany("OrganizationAndUserMappings")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("FK_OrganizationAndUserMapping_Organizations");

                    b.HasOne("ApplicationCore.Entities.User", "User")
                        .WithMany("OrganizationAndUserMappings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_OrganizationAndUserMapping_Users");

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PreFill", b =>
                {
                    b.HasOne("ApplicationCore.Entities.User", "User")
                        .WithMany("PreFills")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_PreFill_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PreferredActivityArea", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Area", "Area")
                        .WithMany("PreferredActivityAreas")
                        .HasForeignKey("AreaId")
                        .IsRequired()
                        .HasConstraintName("FK_PreferredActivityArea_Area");

                    b.HasOne("ApplicationCore.Entities.User", "User")
                        .WithMany("PreferredActivityAreas")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_PreferredActivityArea_Users");

                    b.Navigation("Area");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Seat", b =>
                {
                    b.HasOne("ApplicationCore.Entities.SeatArea", "SeatArea")
                        .WithMany("Seats")
                        .HasForeignKey("SeatAreaId")
                        .IsRequired()
                        .HasConstraintName("FK_Seats_SeatAreas");

                    b.Navigation("SeatArea");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Ticket", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Order", "Order")
                        .WithMany("Tickets")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Tickets_Orders");

                    b.HasOne("ApplicationCore.Entities.Seat", "Seat")
                        .WithMany("Tickets")
                        .HasForeignKey("SeatId")
                        .HasConstraintName("FK_Tickets_Seats");

                    b.HasOne("ApplicationCore.Entities.TicketType", "TicketType")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Tickets_TicketTypes");

                    b.Navigation("Order");

                    b.Navigation("Seat");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("ApplicationCore.Entities.TicketType", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Event", "Event")
                        .WithMany("TicketTypes")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_TicketTypes_Events");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Area", b =>
                {
                    b.Navigation("PreferredActivityAreas");
                });

            modelBuilder.Entity("ApplicationCore.Entities.CategoryTag", b =>
                {
                    b.Navigation("EventAndTagMappings");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Event", b =>
                {
                    b.Navigation("EventAndTagMappings");

                    b.Navigation("TicketTypes");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Order", b =>
                {
                    b.Navigation("ArchiveOrder");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Organization", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("OrgFans");

                    b.Navigation("OrganizationAndUserMappings");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Seat", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SeatArea", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("ApplicationCore.Entities.TicketType", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("ApplicationCore.Entities.User", b =>
                {
                    b.Navigation("HistoryPasswords");

                    b.Navigation("LogInInfo");

                    b.Navigation("Orders");

                    b.Navigation("OrgFans");

                    b.Navigation("OrganizationAndUserMappings");

                    b.Navigation("Organizations");

                    b.Navigation("PreFills");

                    b.Navigation("PreferredActivityAreas");
                });
#pragma warning restore 612, 618
        }
    }
}
